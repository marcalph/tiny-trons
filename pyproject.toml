[project]
name = "tinytrons"
version = "0.1.0"
description = ""
authors = [
    {name = "marcalph", email = "marcalph@protonmail.com"}
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "torch~=2.4.0",
    "transformers>=4.48.3",
    "graphviz>=0.20.3",
    "networkx>=3.4.2",
    "plotly>=6.0.0",
    "dspy>=2.6.2",
    "nbstripout>=0.8.1",
    "outlines>=0.1.14",
    "accelerate>=1.3.0",
    "sentencepiece>=0.2.0",
    "mlx>=0.23.0",
    "mlx-lm>=0.21.4",
    "llama-cpp-python>=0.3.7",
    "pydantic>=2.12.0",
    "tiktoken>=0.12.0",
    "loguru>=0.7.3",
    "pytest>=8.4.2",
    "pydantic-settings>=2.11.0",
]

[project.optional-dependencies]
dev = [
    "ipykernel>=6.29.5",
    "ruff>=0.9.5",
    "pytest>=8.3.4",
    "hypothesis>=6.125.2",
    "pre-commit>=4.0.0",
    "pyright>=1.1.390",
]



[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "NPY",    # numpy-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "B905",   # zip() without explicit strict parameter
    "N806", "N803", "N812"   # variable and args in function should be lowercase (conflicts with ML conventions like B, T, C)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["N802", "N806"]  # Allow non-lowercase functions/vars in tests
"**/__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.pyright]
include = ["data", "model", "ft", "quant", "prompt", "tests"]
exclude = [
    "**/__pycache__",
    ".venv",
    "**/.hypothesis",
]
typeCheckingMode = "basic"
pythonVersion = "3.12"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportGeneralTypeIssues = false  # ML code often has dynamic types

[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
]

[dependency-groups]
dev = [
    "pydantic-settings>=2.11.0",
    "ruff>=0.13.3",
]
